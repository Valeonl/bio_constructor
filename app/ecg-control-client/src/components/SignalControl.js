import React, { useState, useEffect } from 'react';
import './SignalControl.css';

const PATTERNS = [
  {
    id: 'calm',
    name: '–°–ø–æ–∫–æ–π–Ω—ã–π',
    icon: 'üòå',
    bpmRange: { min: 60, max: 80 },
    description: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–¥–µ—á–Ω—ã–π —Ä–∏—Ç–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è'
  },
  {
    id: 'medium',
    name: '–£–º–µ—Ä–µ–Ω–Ω—ã–π',
    icon: 'üòÖ',
    bpmRange: { min: 81, max: 120 },
    description: '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Ç–º –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ'
  },
  {
    id: 'extreme',
    name: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π',
    icon: 'üò∞',
    bpmRange: { min: 121, max: 180 },
    description: '–£—á–∞—â–µ–Ω–Ω—ã–π —Ä–∏—Ç–º –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ'
  }
];

function SignalControl() {
  const [isSignalEnabled, setIsSignalEnabled] = useState(true);
  const [selectedPattern, setSelectedPattern] = useState(PATTERNS[0]);
  const [currentBPM, setCurrentBPM] = useState(PATTERNS[0].bpmRange.min);
  const [isPreciseMode, setIsPreciseMode] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [actualBPM, setActualBPM] = useState(0);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    fetchSettings();
  }, []);

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É–ª—å—Å–∞
  useEffect(() => {
    const fetchCurrentBPM = async () => {
      try {
        const response = await fetch('http://localhost:5000/api/ecg');
        const data = await response.json();
        if (data && data.bpm) {
          setActualBPM(data.bpm);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const interval = setInterval(fetchCurrentBPM, 1000);
    return () => clearInterval(interval);
  }, []);

  const fetchSettings = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/settings');
      const settings = await response.json();
      setIsSignalEnabled(settings.is_enabled);
      const pattern = PATTERNS.find(p => p.id === settings.pattern) || PATTERNS[0];
      setSelectedPattern(pattern);
      setCurrentBPM(settings.bpm);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  const updateSettings = async (newSettings) => {
    setIsSaving(true);
    try {
      await fetch('http://localhost:5000/api/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newSettings),
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
    setIsSaving(false);
  };

  const handlePatternSelect = (pattern) => {
    setSelectedPattern(pattern);
    setCurrentBPM(pattern.bpmRange.min);
    setIsPreciseMode(false);
    updateSettings({
      pattern: pattern.id,
      bpm: pattern.bpmRange.min,
      precise_mode: false
    });
  };

  const handleSliderClick = () => {
    if (!isPreciseMode) {
      setIsPreciseMode(true);
      updateSettings({ 
        precise_mode: true,
        bpm: currentBPM 
      });
    }
  };

  const handleBPMChange = (e) => {
    const newBPM = Number(e.target.value);
    setCurrentBPM(newBPM);
    if (!isPreciseMode) {
      setIsPreciseMode(true);
      updateSettings({ 
        precise_mode: true,
        bpm: newBPM 
      });
    } else {
      updateSettings({ bpm: newBPM });
    }
  };

  const toggleSignal = () => {
    const newState = !isSignalEnabled;
    setIsSignalEnabled(newState);
    updateSettings({ is_enabled: newState });
  };

  const handlePreciseModeToggle = () => {
    const newPreciseMode = !isPreciseMode;
    setIsPreciseMode(newPreciseMode);
    
    if (newPreciseMode) {
      updateSettings({ 
        precise_mode: true,
        bpm: currentBPM 
      });
    } else {
      const avgBPM = Math.floor(
        (selectedPattern.bpmRange.min + selectedPattern.bpmRange.max) / 2
      );
      setCurrentBPM(avgBPM);
      updateSettings({ 
        precise_mode: false,
        bpm: avgBPM 
      });
    }
  };

  const getCurrentPattern = () => {
    if (isPreciseMode) {
      return "–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞";
    }
    return selectedPattern.name;
  };

  return (
    <div className="signal-control">
      <h1>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≠–ö–ì</h1>
      
      <div className="control-panel">
        <div className="signal-toggle">
          <button 
            className={`toggle-button ${isSignalEnabled ? 'active' : ''}`}
            onClick={toggleSignal}
          >
            <div className="toggle-slider"></div>
            <span>{isSignalEnabled ? '–°–∏–≥–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω' : '–°–∏–≥–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω'}</span>
          </button>
        </div>

        <div className="patterns-container">
          <h2>–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–≥–Ω–∞–ª–∞</h2>
          <div className="pattern-cards">
            {PATTERNS.map(pattern => (
              <div 
                key={pattern.id}
                className={`pattern-card ${selectedPattern.id === pattern.id ? 'selected' : ''}`}
                onClick={() => handlePatternSelect(pattern)}
              >
                <div className="pattern-icon">{pattern.icon}</div>
                <h3>{pattern.name}</h3>
                <p className="pattern-bpm">{pattern.bpmRange.min}-{pattern.bpmRange.max} —É–¥/–º–∏–Ω</p>
                <p className="pattern-description">{pattern.description}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="bpm-control">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Å–∞</h2>
          <div className="precise-mode-toggle">
            <label>
              <input
                type="checkbox"
                className="heart-checkbox"
                checked={isPreciseMode}
                onChange={handlePreciseModeToggle}
              />
              <span></span>
              –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Å–∞
            </label>
          </div>
          <div className="slider-container">
            <input
              type="range"
              min={0}
              max={200}
              value={currentBPM}
              onChange={handleBPMChange}
              onClick={handleSliderClick}
              onMouseDown={handleSliderClick}
              className="bpm-slider"
              style={{ cursor: 'pointer' }}
            />
            <div className="bpm-value">
              {currentBPM} <span>—É–¥/–º–∏–Ω</span>
            </div>
          </div>
        </div>
      </div>

      <div className="current-status">
        <h2>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h2>
        <div className="status-info">
          <div className="status-item">
            <span>–°—Ç–∞—Ç—É—Å:</span>
            <span className={`status-value ${isSignalEnabled ? 'active' : ''}`}>
              {isSignalEnabled ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            </span>
          </div>
          <div className="status-item">
            <span>–ü–∞—Ç—Ç–µ—Ä–Ω:</span>
            <span className="status-value">{getCurrentPattern()}</span>
          </div>
          <div className="status-item">
            <span>–¢–µ–∫—É—â–∏–π –ø—É–ª—å—Å:</span>
            <span className="status-value">{actualBPM} —É–¥/–º–∏–Ω</span>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SignalControl; 