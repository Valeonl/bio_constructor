import React, { useState, useEffect } from 'react';
import { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';
import PuzzlePiece from './PuzzlePiece';
import PuzzleSlot from './PuzzleSlot';
import EmptyDropZone from './EmptyDropZone';
import './SessionConstructor.css';

const PUZZLE_PIECES = [
  {
    id: 'calm',
    type: 'calm',
    title: '–°–ø–æ–∫–æ–π–Ω—ã–π —ç—Ç–∞–ø',
    icon: 'üòå',
    description: '–≠—Ç–∞–ø –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ –æ—Ç–¥—ã—Ö–∞'
  },
  {
    id: 'tetris',
    type: 'tetris',
    title: '–ò–≥—Ä–∞ –¢–µ—Ç—Ä–∏—Å',
    icon: 'üü¶',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –¢–µ—Ç—Ä–∏—Å'
  },
  {
    id: 'dino',
    type: 'dino',
    title: '–ò–≥—Ä–∞ –î–∏–Ω–æ–∑–∞–≤—Ä–∏–∫',
    icon: 'ü¶ñ',
    description: '–ò–≥—Ä–∞ –≤ —Å—Ç–∏–ª–µ Chrome Dino'
  },
  {
    id: 'custom',
    type: 'custom',
    title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫',
    icon: 'cube',
    description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –±–ª–æ–∫',
    duration: 60
  }
];

function SessionConstructor() {
  const [sessionPieces, setSessionPieces] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isInitialized, setIsInitialized] = useState(false);
  const [customBlocks, setCustomBlocks] = useState([]);

  const filteredPieces = PUZZLE_PIECES.filter(piece => 
    piece.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleDrop = (index, item, isInsertBetween = false) => {
    console.log('Dropping item:', item);

    const newPiece = {
      ...item,
      id: `${item.type}-${Date.now()}`,
      duration: item.duration || 60,
    };
    
    console.log('Created new piece:', newPiece);

    setSessionPieces(prevPieces => {
      const updatedPieces = [...prevPieces];
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ñ–ª–∞–≥–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
      const newPiece = {
        ...item,
        id: `${item.type}-${Date.now()}`,
        isInserting: true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
      };

      if (isInsertBetween) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ —Å–æ—Å–µ–¥–Ω–∏–º –±–ª–æ–∫–∞–º
        const slots = document.querySelectorAll('.puzzle-slot');
        slots.forEach((slot, i) => {
          if (i >= index) {
            slot.classList.add('shifting-right');
          }
        });

        // –í—Å—Ç–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        updatedPieces.splice(index, 0, newPiece);

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => {
          slots.forEach(slot => {
            slot.classList.remove('shifting-right');
          });
          // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏ —É –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
          const pieceElement = document.querySelector(`.puzzle-piece[data-id="${newPiece.id}"]`);
          if (pieceElement) {
            pieceElement.classList.remove('inserting');
          }
        }, 300);
      } else {
        // –û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
        updatedPieces.push(newPiece);
      }

      // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ isInserting —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        setSessionPieces(pieces => 
          pieces.map(piece => 
            piece.id === newPiece.id ? { ...piece, isInserting: false } : piece
          )
        );
      }, 300); // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏

      return updatedPieces;
    });
  };

  const handleRemovePiece = (index) => {
    // –ü–æ–º–µ—á–∞–µ–º —É–¥–∞–ª—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
    setSessionPieces(prevPieces => 
      prevPieces.map((piece, i) => 
        i === index ? { ...piece, isRemoving: true } : piece
      )
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–¥–≤–∏–≥–∞ –¥–ª—è –±–ª–æ–∫–æ–≤ —Å–ø—Ä–∞–≤–∞
    const slots = document.querySelectorAll('.puzzle-slot');
    slots.forEach((slot, i) => {
      if (i > index) {
        slot.classList.add('collapsing-left');
      }
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      setSessionPieces(prevPieces => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ isRemoving
        const newPieces = prevPieces
          .filter((piece, i) => i !== index)
          .map(piece => ({
            ...piece,
            isRemoving: false // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          }));
        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫
        if (index === 0 && newPieces.length > 0) {
          newPieces[0] = {
            ...newPieces[0],
            isStart: true,
            isRemoving: false // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ—Ç —Ñ–ª–∞–≥–∞
          };
        }

        return newPieces;
      });

      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏
      slots.forEach(slot => {
        slot.classList.remove('collapsing-left');
        const piece = slot.querySelector('.puzzle-piece');
        if (piece) {
          piece.removeAttribute('data-removing'); // –£–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç
        }
      });
    }, 300);
  };

  const handleSetLastPiece = (index) => {
    const newPieces = sessionPieces.map((piece, i) => ({
      ...piece,
      isLast: i === index
    }));
    setSessionPieces(newPieces);
  };

  const handleResetSession = async () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é?')) {
      try {
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ
        await fetch('http://localhost:5000/api/session/clear', {
          method: 'POST'
        });
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setSessionPieces([]);
        localStorage.removeItem('sessionPieces');
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏:', error);
      }
    }
  };

  const handleSaveSession = async () => {
    try {
      const blocksWithDuration = sessionPieces.map(piece => {
        const defaultDuration = {
          'calm': 120,
          'tetris': 60,
          'dino': 60,
          'custom': 60
        };

        const duration = piece.duration || defaultDuration[piece.type] || 60;
        console.log(`Block ${piece.id} duration:`, {
          original: piece.duration,
          default: defaultDuration[piece.type],
          final: duration
        });

        return {
          ...piece,
          duration
        };
      });

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
      const totalDuration = blocksWithDuration.reduce((sum, block) => sum + block.duration, 0);
      const minutes = Math.floor(totalDuration / 60);
      const seconds = totalDuration % 60;

      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:');
      console.log('–ë–ª–æ–∫–∏:', blocksWithDuration.map(block => ({
        type: block.type,
        title: block.title,
        duration: block.duration
      })));
      console.log(`–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${minutes} –º–∏–Ω ${seconds} —Å–µ–∫ (${totalDuration} —Å–µ–∫)`);

      const response = await fetch('http://localhost:5000/api/session/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          blocks: blocksWithDuration
        })
      });

      if (response.ok) {
        alert('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      } else {
        const data = await response.json();
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–±–∫–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é: ' + error.message);
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyPress = (e) => {
      // Ctrl/Cmd + F
      if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        const element = document.querySelector('.puzzle-slots');
        if (element) {
          const wrapper = document.querySelector('.canvas-container');
          const wrapperRect = wrapper.getBoundingClientRect();
          const elementRect = element.getBoundingClientRect();
          
          // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä
          const x = (wrapperRect.width - elementRect.width) / 2;
          const y = (wrapperRect.height - elementRect.height) / 2;
          
          // –ü—Ä–∏–º–µ–Ω—è–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ TransformComponent
          const transformComponent = document.querySelector('.react-transform-component');
          if (transformComponent) {
            transformComponent.style.transform = `translate(${x}px, ${y}px) scale(1)`;
          }
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, []);

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    setIsInitialized(true);
  }, []);

  const centerContent = () => {
    const element = document.querySelector('.initial-drop-container') || 
                    document.querySelector('.puzzle-slots');
    if (element) {
      const wrapper = document.querySelector('.canvas-container');
      const wrapperRect = wrapper.getBoundingClientRect();
      const elementRect = element.getBoundingClientRect();
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä
      const x = (wrapperRect.width - elementRect.width) / 2;
      const y = (wrapperRect.height - elementRect.height) / 2;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ TransformComponent
      const transformComponent = document.querySelector('.react-transform-component');
      if (transformComponent) {
        transformComponent.style.transform = `translate(${x}px, ${y}px)`;
      }
    }
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('sessionPieces', JSON.stringify(sessionPieces));
  }, [sessionPieces]);

  const handleSetDuration = async (pieceId, duration) => {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∞:', {
      pieceId,
      duration,
      block: sessionPieces.find(p => p.id === pieceId)
    });

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
      const response = await fetch('http://localhost:5000/api/session/update-duration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          blockId: pieceId,
          duration: parseInt(duration)
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSessionPieces(prev => prev.map(piece => 
        piece.id === pieceId 
          ? { ...piece, duration: parseInt(duration) } 
          : piece
      ));

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    }
  };

  const handleEditCustom = (pieceId, { title, description }) => {
    setSessionPieces(prev => prev.map(piece => 
      piece.id === pieceId ? { ...piece, title, description } : piece
    ));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–ª–æ–∫–∞
  const handleCreateCustomBlock = () => {
    const newBlock = {
      id: `custom-${Date.now()}`,
      type: 'custom',
      title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫',
      icon: '',
      duration: 60,
      isDraggable: true
    };
    
    setSessionPieces(prev => [...prev, newBlock]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–ª–æ–∫–∞
  const handleUpdateCustomBlock = (blockId, updates) => {
    setSessionPieces(prev => prev.map(piece => 
      piece.id === blockId ? { ...piece, ...updates } : piece
    ));
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤
  const renderAvailableBlocks = () => {
    const standardBlocks = PUZZLE_PIECES.filter(piece => piece.type !== 'custom');
    return (
      <div className="available-pieces">
        <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</h3>
        <div className="pieces-list">
          {standardBlocks.map(piece => (
            <PuzzlePiece
              key={piece.id}
              {...piece}
              isDraggable
              onDragStart={() => setIsDragging(true)}
              onDragEnd={() => setIsDragging(false)}
              onSetDuration={handleSetDuration}
            />
          ))}
          <button 
            className="add-custom-block"
            onClick={handleCreateCustomBlock}
          >
            <i className="fas fa-plus"></i>
            <span>–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫</span>
          </button>
        </div>
      </div>
    );
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadSession = async () => {
      try {
        const response = await fetch('http://localhost:5000/api/session/active');
        const data = await response.json();
        
        if (data.session && data.session.blocks) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–ª–æ–∫–∏ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è sessionPieces
          const pieces = data.session.blocks.map(block => ({
            id: `${block.type}-${block.id}`,
            type: block.type,
            title: block.name,
            icon: getBlockIcon(block.type),
            duration: block.duration,
            isLast: block.is_last
          }));
          
          setSessionPieces(pieces);
        } else {
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setSessionPieces([]);
          localStorage.removeItem('sessionPieces');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏:', error);
        setSessionPieces([]);
      }
    };

    loadSession();
  }, []); // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
  const getBlockIcon = (type) => {
    switch (type) {
      case 'calm': return 'üòå';
      case 'tetris': return 'üü¶';
      case 'dino': return 'ü¶ñ';
      default: return 'üì¶';
    }
  };

  return (
    <div className="session-constructor-wrapper">
      <div className="session-constructor">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <div className="sidebar">
          <div className="search-container">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>
          
          {renderAvailableBlocks()}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ö–æ–ª—Å—Ç–æ–º */}
        <div className={`canvas-container ${sessionPieces.some(piece => piece.isLast) ? 'session-ended' : ''} ${isDragging ? 'is-dragging' : ''}`}>
          {sessionPieces.length === 0 && isInitialized && (
            <div className={`empty-slot-hint ${isDragging ? 'dragging' : ''}`}>
              {isDragging ? 
                "–û—Ç–ø—É—Å—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ªÔøΩÔøΩ —Ü–µ–ø–æ—á–∫–∏" : 
                "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
              }
            </div>
          )}
          
          {sessionPieces.some(piece => piece.isLast) && isDragging && (
            <div className="session-end-warning">
              –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–∫–æ–Ω—á–µ–Ω–æ. 
              <br />
              –£–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            </div>
          )}
          
          <TransformWrapper
            initialScale={1}
            minScale={0.5}
            maxScale={2}
            centerOnInit={true}
            alignmentAnimation={{ disabled: true }}
            limitToBounds={false}
            panning={{ disabled: isDragging }}
          >
            {({ zoomIn, zoomOut, resetTransform }) => (
              <>
                <div className="canvas-controls">
                  <button onClick={() => zoomIn()}>+</button>
                  <button onClick={() => zoomOut()}>-</button>
                  <button onClick={() => {
                    resetTransform();
                    centerContent();
                  }}>–°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥</button>
                </div>
                <TransformComponent>
                  <div className="canvas">
                    {sessionPieces.length > 0 ? (
                      <div className="puzzle-slots">
                        {sessionPieces.map((piece, index) => (
                          <PuzzleSlot
                            key={`slot-${index}`}
                            index={index}
                            piece={piece}
                            onDrop={handleDrop}
                            onRemove={handleRemovePiece}
                            onSetLast={handleSetLastPiece}
                            isLast={piece.isLast}
                            isStart={piece.isStart}
                            isDragging={isDragging}
                            hasLastPiece={sessionPieces.some(p => p.isLast)}
                            availableBlocks={PUZZLE_PIECES}
                          />
                        ))}
                        {!sessionPieces.some(piece => piece.isLast) && (
                          <PuzzleSlot
                            index={sessionPieces.length}
                            onDrop={handleDrop}
                            isEmpty
                            isDragging={isDragging}
                            hasLastPiece={sessionPieces.some(p => p.isLast)}
                            availableBlocks={PUZZLE_PIECES}
                          />
                        )}
                      </div>
                    ) : (
                      isInitialized && (
                        <div className="initial-drop-container">
                          <EmptyDropZone onDrop={handleDrop} />
                        </div>
                      )
                    )}
                  </div>
                </TransformComponent>
              </>
            )}
          </TransformWrapper>
        </div>

        {/* –ö–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π */}
        <div className="session-controls">
          <button 
            className="reset-button"
            onClick={handleResetSession}
          >
            –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é
          </button>
          {sessionPieces.some(piece => piece.isLast) && (
            <>
              <button 
                className="save-button"
                onClick={handleSaveSession}
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
              </button>
            </>
          )}
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
        {showModal && (
          <div className="modal-overlay">
            <div className="modal-content">
              <h3>–°–æ—Å—Ç–∞–≤ —Å–µ—Å—Å–∏–∏</h3>
              <div className="session-summary">
                {sessionPieces.map((piece, index) => (
                  <div key={piece.id} className="session-piece-summary">
                    <span className="piece-number">{index + 1}.</span>
                    {index === 0 ? (
                      <span className="piece-start">
                        <i className="fas fa-flag-checkered"></i>
                        <span>–ù—á–∞–ª–æ: {PUZZLE_PIECES.find(p => p.type === piece.type)?.title}</span>
                      </span>
                    ) : piece.isLast ? (
                      <span className="piece-end">
                        <i className="fas fa-flag"></i>
                        <span>–ö–æ–Ω–µ—Ü: {PUZZLE_PIECES.find(p => p.type === piece.type)?.title}</span>
                      </span>
                    ) : (
                      <span className="piece-middle">
                        <i className="fas fa-puzzle-piece"></i>
                        <span>{PUZZLE_PIECES.find(p => p.type === piece.type)?.title}</span>
                      </span>
                    )}
                  </div>
                ))}
              </div>
              <button onClick={() => setShowModal(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default SessionConstructor; 