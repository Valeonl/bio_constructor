import React, { useState } from 'react';
import './SignalControl.css';

const PATTERNS = [
  {
    id: 'calm',
    name: '–°–ø–æ–∫–æ–π–Ω—ã–π',
    icon: 'üòå',
    bpmRange: { min: 60, max: 80 },
    description: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–¥–µ—á–Ω—ã–π —Ä–∏—Ç–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è'
  },
  {
    id: 'medium',
    name: '–£–º–µ—Ä–µ–Ω–Ω—ã–π',
    icon: 'üòÖ',
    bpmRange: { min: 81, max: 120 },
    description: '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Ç–º –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ'
  },
  {
    id: 'extreme',
    name: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π',
    icon: 'üò∞',
    bpmRange: { min: 121, max: 180 },
    description: '–£—á–∞—â–µ–Ω–Ω—ã–π —Ä–∏—Ç–º –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ'
  }
];

function SignalControl() {
  const [isSignalEnabled, setIsSignalEnabled] = useState(true);
  const [selectedPattern, setSelectedPattern] = useState(PATTERNS[0]);
  const [currentBPM, setCurrentBPM] = useState(PATTERNS[0].bpmRange.min);

  const handlePatternSelect = (pattern) => {
    setSelectedPattern(pattern);
    setCurrentBPM(pattern.bpmRange.min);
  };

  const handleBPMChange = (e) => {
    setCurrentBPM(Number(e.target.value));
  };

  const toggleSignal = () => {
    setIsSignalEnabled(!isSignalEnabled);
  };

  return (
    <div className="signal-control">
      <h1>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≠–ö–ì</h1>
      
      <div className="control-panel">
        <div className="signal-toggle">
          <button 
            className={`toggle-button ${isSignalEnabled ? 'active' : ''}`}
            onClick={toggleSignal}
          >
            <div className="toggle-slider"></div>
            <span>{isSignalEnabled ? '–°–∏–≥–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω' : '–°–∏–≥–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω'}</span>
          </button>
        </div>

        <div className="patterns-container">
          <h2>–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–≥–Ω–∞–ª–∞</h2>
          <div className="pattern-cards">
            {PATTERNS.map(pattern => (
              <div 
                key={pattern.id}
                className={`pattern-card ${selectedPattern.id === pattern.id ? 'selected' : ''}`}
                onClick={() => handlePatternSelect(pattern)}
              >
                <div className="pattern-icon">{pattern.icon}</div>
                <h3>{pattern.name}</h3>
                <p className="pattern-bpm">{pattern.bpmRange.min}-{pattern.bpmRange.max} —É–¥/–º–∏–Ω</p>
                <p className="pattern-description">{pattern.description}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="bpm-control">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Å–∞</h2>
          <div className="slider-container">
            <input
              type="range"
              min={selectedPattern.bpmRange.min}
              max={selectedPattern.bpmRange.max}
              value={currentBPM}
              onChange={handleBPMChange}
              className="bpm-slider"
            />
            <div className="bpm-value">
              {currentBPM} <span>—É–¥/–º–∏–Ω</span>
            </div>
          </div>
        </div>
      </div>

      <div className="current-status">
        <h2>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h2>
        <div className="status-info">
          <div className="status-item">
            <span>–°—Ç–∞—Ç—É—Å:</span>
            <span className={`status-value ${isSignalEnabled ? 'active' : ''}`}>
              {isSignalEnabled ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            </span>
          </div>
          <div className="status-item">
            <span>–ü–∞—Ç—Ç–µ—Ä–Ω:</span>
            <span className="status-value">{selectedPattern.name}</span>
          </div>
          <div className="status-item">
            <span>–¢–µ–∫—É—â–∏–π –ø—É–ª—å—Å:</span>
            <span className="status-value">{currentBPM} —É–¥/–º–∏–Ω</span>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SignalControl; 